version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: kryptovault-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: kryptovault
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_DB: kryptovault
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - kryptovault-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kryptovault"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: kryptovault-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: postgresql://kryptovault:${DB_PASSWORD:-changeme}@postgres:5432/kryptovault
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_change_in_production}
      PORT: 3000
      NODE_ENV: production
      CORS_ORIGIN: ${FRONTEND_URL:-http://localhost}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kryptovault-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: kryptovault-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - kryptovault-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  kryptovault-network:
    driver: bridge
